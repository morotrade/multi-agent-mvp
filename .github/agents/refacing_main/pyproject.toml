[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "reface_engine"
version = "1.0.0"
description = "Production-ready full file refacing engine using LLMs"
readme = "reface_engine/README.md"
license = {file = "LICENSE"}
authors = [
    {name = "AI Development Team", email = "dev@example.com"}
]
maintainers = [
    {name = "AI Development Team", email = "dev@example.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
]
keywords = [
    "llm", "refactoring", "code-generation", "ai", "automation",
    "file-rewriting", "code-improvement", "developer-tools"
]
requires-python = ">=3.8"
dependencies = [
    "httpx>=0.27.0",
]

[project.optional-dependencies]
openai = ["openai>=1.40.0"]
anthropic = ["anthropic>=0.36.0"]
gemini = ["google-generativeai>=0.7.0"]
all = [
    "openai>=1.40.0",
    "anthropic>=0.36.0",
    "google-generativeai>=0.7.0"
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "twine>=4.0.0",
]
formatters = [
    "black>=23.0.0",
    "ruff>=0.1.0",
]

[project.scripts]
reface = "reface_engine.cli:main"

[project.urls]
Homepage = "https://github.com/yourusername/reface_engine"
Documentation = "https://reface-engine.readthedocs.io/"
Repository = "https://github.com/yourusername/reface_engine"
"Bug Tracker" = "https://github.com/yourusername/reface_engine/issues"

# Tool configurations

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
]
ignore = [
    "E501",  # line too long (black handles this)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err`
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["N802", "N803"]  # Allow non-lowercase test names

[tool.ruff.isort]
known-first-party = ["reface_engine"]
force-single-line = false
lines-after-imports = 2

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "openai.*",
    "anthropic.*",
    "google.generativeai.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
testpaths = ["reface_engine/tests"]
markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow",
    "requires_llm: marks tests that require LLM API access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["reface_engine"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"